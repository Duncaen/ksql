.\"	$Id$
.\"
.\" Copyright (c) 2018 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt KSQL_CFG_DEFAULTS 3
.Os
.Sh NAME
.Nm ksql_cfg_defaults
.Nd set defaults for a ksql configuration
.Sh LIBRARY
.Lb ksql
.Sh SYNOPSIS
.In sys/types.h
.In stdint.h
.In ksql.h
.Ft void
.Fo ksql_cfg_defaults
.Fa "struct ksqlcfg *cfg"
.Fc
.Sh DESCRIPTION
The
.Nm
function initialises
.Fa cfg
with useful defaults: the
.Dv KSQL_EXIT_ON_ERR
and
.Dv KSQL_SAFE_EXIT
flags are set, which means that any errors in using database routines
will trigger an exit; and upon exiting in such a state, the database
will be properly cleaned up.
The
.Fn ksqlitemsg
and
.Fn ksqlitedbmsg
functions are set as error message loggers.
These output to
.Dv stderr
the full error message and error code for both regular and database
errors.
.Pp
The
.Vt struct ksqlcfg
structure consists of the following:
.Bl -tag -width Ds
.It Va void *arg
The private argument passed to
.Va err
and
.Va dberr .
.It Va ksqldbmsg dberr
A function that will be invoked upon a database error, for example, if
.Xr sqlite3_step 3
does not return an
.Dv SQLITE_DONE
or
.Dv SQLITE_ROW
code.
.It Va ksqlmsg err
Supply a function that will be invoked upon a non-database error, for
example, memory allocation.
.It Va unsigned int flags
A bit-field which may consists of
.Dv KSQL_EXIT_ON_ERR ,
which causes the system to
.Xr exit 3
if any database errors occur;
.Dv KSQL_FOREIGN_KEYS ,
which causes the database to be subsequently opened with foreign key
support; and
.Dv KSQL_SAFE_EXIT ,
which causes the library to register an
.Xr atexit 3
hook to free the database if it hasn't be freed prior to exit.
The
.Dv KSQL_SAFE_EXIT
flag will also cause the
.Dv SIGABRT
and
.Dv SIGSEGV
signals to be caught and
.Xr siglongjmp 3
into an exit handler, which will then close out open databases.
.It Va struct ksqlroles roles
Role-based access control configuration.
Roles map a caller role to stored statements in
.Fa stmts
and set the availability of further role transition with
.Xr ksql_role 3 .
.It Va struct ksqlstmts stmts
Structure containing stored statement information.
If stored statements are provided,
.Xr ksql_stmt_alloc 3
and
.Xr ksql_exec 3
will only draw from the stored statements.
.El
.Pp
The
.Vt ksqlmsg
function is invoked as
.Ft void
.Fo ksqlmsg
.Fa "void *arg"
.Fa "enum ksqlc code"
.Fa "const char *file"
.Fa "const char *msg"
.Fc ,
with
.Fa arg
being the private argument,
.Fa argc
being the error code in question,
the database
.Fa file
.Po which may be
.Dv NULL Pc ,
and
.Fa msg
being an ASCII string describing the error (in English).
.Pp
The
.Vt ksqldbmsg
function is
.Ft void
.Fo ksqldbmsg
.Fa "void *arg"
.Fa "int sqlerr"
.Fa "int sqlexterr"
.Fa "const char *file"
.Fa "const char *msg"
.Fc ,
which also has the
.Fa sqlerr
and
.Fa sqlexterr
SQLite error and extended error code, and and the SQLite string error
message
.Fa msg .
.Pp
The
.Fa stmts
variable configures stored statements.
These provide an extra measure of security for
.Xr ksql_alloc_child 3
contexts where the protected child process manages pre-set SQL
statements that cannot be changed by the caller.
It contains the following:
.Bl -tag -width Ds
.It Fa const char *const *stmts
An array of SQL statement strings, none of which may be
.Dv NULL .
.It Fa size_t stmtsz
The number of entries in
.Fa stmts .
both of which allow stored statements.
.El
.Pp
The
.Fa roles
variable configures role-based access control mapping roles to stored
statements set in
.Fa stmts .
Stored statements may be used without roles, but roles require stored
statements.
The structure consists of the following:
.Bl -tag -width Ds
.It Fa struct ksqlrole *roles
The role array.
Each
.Fa struct ksqlrole
entry consists of
.Fa roles ,
a list of possible roles that may be subsequently set with
.Xr ksql_role 3
from the current role;
.Fa flags ,
a bit-field consisting only of
.Dv KSQLROLE_OPEN ,
which indicates that the role may open databases; and
.Fa stmts ,
a list of all possible statements.
The index of a statement in
.Fa stmts
and the role in
.Fa roles
corresponds to the
.Fa id
passed to
.Xr ksql_stmt_alloc 3
and
.Xr ksql_exec 3 .
If it zero if false (the role may not execute the statement, or the role
may not be entered from the given role), non-zero if it may.
.It Fa size_t rolesz
The length of
.Fa roles .
.It Fa size_t defrole
The index of the default role set upon
.Xr ksql_alloc 3
or
.Xr ksql_alloc_child 3 .
.El
.\" .Sh CONTEXT
.\" For section 9 functions only.
.\" .Sh IMPLEMENTATION NOTES
.\" Not used in OpenBSD.
.\" .Sh RETURN VALUES
.\" For sections 2, 3, and 9 function return values only.
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.\" .Sh FILES
.\" .Sh EXIT STATUS
.\" For sections 1, 6, and 8 only.
.Sh EXAMPLES
In this simple example, a default configuration is extended with stored
statements, then the connection is started in split-process mode and the
caller sandboxes.
(The sandboxing is only available on
.Ox . )
For brevity, no error checking is performed.
.Bd -literal
struct ksqlcfg cfg;
struct ksql *sql;
const char *const stmts[] = {
  "INSERT INTO test (foo) VALUES (?)",
  "SELECT foo FROM test"
};

ksql_cfg_defaults(&cfg);
cfg.stmts.stmts = stmts;
cfg.stmts.stmtsz = 2;

sql = ksql_alloc_child(&cfg, NULL, NULL);
pledge("stdio", NULL);
.Ed
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.\" .Sh ERRORS
.\" For sections 2, 3, 4, and 9 errno settings only.
.Sh SEE ALSO
.Xr ksql_alloc 3 ,
.Xr ksql_alloc_child 3 ,
.Xr ksql_exec 3 ,
.Xr ksql_stmt_alloc 3
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.\" .Sh BUGS
.\" .Sh SECURITY CONSIDERATIONS
.\" Not used in OpenBSD.
